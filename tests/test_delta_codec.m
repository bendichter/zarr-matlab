classdef test_delta_codec < matlab.unittest.TestCase
    properties
        TestFile
    end
    
    methods(TestMethodSetup)
        function setup(testCase)
            % Get temp directory in a cross-platform way
            temp_dir = fullfile(tempdir, 'zarr_matlab_test_data');
            if ~exist(temp_dir, 'dir')
                mkdir(temp_dir);
            end
            testCase.TestFile = fullfile(temp_dir, 'delta_test_data.bin');
            
            % Generate test data using Python script
            [status, output] = system('python write_delta_test_data.py');
            assert(status == 0, 'Failed to generate test data: %s', output);
        end
    end
    
    methods(TestMethodTeardown)
        function cleanup(testCase)
            % Clean up test file
            if exist(testCase.TestFile, 'file')
                delete(testCase.TestFile);
            end
            
            % Try to remove temp directory if empty
            [temp_dir, ~, ~] = fileparts(testCase.TestFile);
            if exist(temp_dir, 'dir')
                rmdir(temp_dir);
            end
        end
    end
    
    methods(Test)
        function test_basic_encoding(testCase)
            codec = zarr.codecs.DeltaCodec('int32');
            data = int32([5 7 9 11]);
            encoded = codec.encode(data);
            testCase.verifyEqual(encoded, int32([5 2 2 2]));
            
            decoded = codec.decode(encoded);
            testCase.verifyEqual(decoded, data);
        end
        
        function test_dtype_handling(testCase)
            % Test different data types
            types = {'uint8', 'int16', 'single', 'double'};
            for t = types
                codec = zarr.codecs.DeltaCodec(t{1});
                data = cast([10 15 17 20], t{1});
                
                encoded = codec.encode(data);
                decoded = codec.decode(encoded);
                
                testCase.verifyClass(encoded, t{1});
                testCase.verifyClass(decoded, t{1});
                testCase.verifyEqual(decoded, data);
            end
        end
        
        function test_empty_array(testCase)
            codec = zarr.codecs.DeltaCodec('double');
            data = double.empty(0,5);
            
            encoded = codec.encode(data);
            testCase.verifyEmpty(encoded);
            
            decoded = codec.decode(encoded);
            testCase.verifyEmpty(decoded);
        end
        
        function test_python_compatibility(testCase)
            % Test with data generated by Python numcodecs
            if ~exist(testCase.TestFile, 'file')
                error('Test data file not found: %s', testCase.TestFile);
            end
            
            % Read Python-generated encoded data
            fid = fopen(testCase.TestFile, 'r');
            encoded = fread(fid, 'int32');
            fclose(fid);
            
            codec = zarr.codecs.DeltaCodec('int32');
            decoded = codec.decode(encoded);
            testCase.verifyEqual(decoded, int32([100 150 175 200 225]'));
        end
    end
end
